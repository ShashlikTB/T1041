#include "pulseShapeForFit.h"
#include <Math/Interpolator.h>
#include <TF1.h>


double PulseShapeAx[]={
  -100.0,-1.59375,-1.40625,-1.21875,-1.03125,-0.84375,-0.65625,-0.46875,-0.28125,-0.09375,0.09375,0.28125,0.46875,0.65625,0.84375,1.03125,1.21875,1.40625,1.59375,1.78125,1.96875,2.15625,2.34375,2.53125,2.71875,2.90625,3.09375,3.28125,3.46875,3.65625,3.84375,4.03125,4.21875,4.40625,4.59375,4.78125,4.96875,5.15625,5.34375,5.53125,5.71875,5.90625,6.09375,6.28125,6.46875,6.65625,6.84375,7.03125,7.21875,7.40625,7.59375,7.78125,7.96875,8.15625,8.34375,8.53125,8.71875,8.90625,9.09375,9.28125,9.46875,9.65625,9.84375,10.0312,10.2188,10.4062,10.5938,10.7812,10.9688,11.1562,11.3438,11.5312,11.7188,11.9062,12.0938,12.2812,12.4688,12.6562,12.8438,13.0312,13.2188,13.4062,13.5938,13.7812,13.9688,14.1562,14.3438,14.5312,14.7188,14.9062,15.0938,15.2812,15.4688,15.6562,15.8438,16.0312,16.2188,16.4062,16.5938,16.7812,16.9688,17.1562,17.3438,17.5312,17.7188,17.9062,18.0938,18.2812,18.4688,18.6562,18.8438,19.0312,19.2188,19.4062,19.5938,19.7812,19.9688,20.1562,20.3438,20.5312,20.7188,20.9062,21.0938,21.2812,21.4688,21.6562,21.8438,22.0312,22.2188,22.4062,22.5938,22.7812,22.9688,23.1562,23.3438,23.5312,23.7188,23.9062,24.0938,24.2812,24.4688,24.6562,24.8438,25.0312,25.2188,25.4062,25.5938,25.7812,25.9688,26.1562,26.3438,26.5312,26.7188,26.9062,27.0938,27.2812,27.4688,27.6562,27.8438,28.0312,28.2188,28.4062,28.5938,28.7812,28.9688,29.1562,29.3438,29.5312,29.7188,29.9062,30.0938,30.2812,30.4688,30.6562,30.8438,31.0312,31.2188,31.4062,31.5938,31.7812,31.9688,32.1562,32.3438,32.5312,32.7188,32.9062,33.0938,33.2812,33.4688,33.6562,33.8438,34.0312,34.2188,34.4062,34.5938,34.7812,34.9688,35.1562,35.3438,35.5312,35.7188,35.9062,36.0938,36.2812,36.4688,36.6562,36.8438,37.0312,37.2188,37.4062,37.5938,37.7812,37.9688,38.1562,38.3438,38.5312,38.7188,38.9062,39.0938,39.2812,39.4688,39.6562,39.8438,40.0312,40.2188,40.4062,40.5938,40.7812,40.9688,41.1562,41.3438,41.5312,41.7188,41.9062,42.0938,42.2812,42.4688,42.6562,42.8438,43.0312,43.2188,43.4062,43.5938,43.7812,43.9688,44.1562,44.3438,44.5312,44.7188,44.9062,45.0938,45.2812,45.4688,45.6562,45.8438,46.0312,46.2188,46.4062,46.5938,46.7812,46.9688,47.1562,47.3438,47.5312,47.7188,47.9062,48.0938,48.2812,48.4688,48.6562,48.8438,49.0312,49.2188,49.4062,49.5938,49.7812,49.9688,50.1562,50.3438,50.5312,50.7188,50.9062,51.0938,51.2812,51.4688,51.6562,51.8438,52.0312,52.2188,52.4062,52.5938,52.7812,52.9688,53.1562,53.3438,53.5312,53.7188,53.9062,54.0938,54.2812,54.4688,54.6562,54.8438,55.0312,55.2188,55.4062,55.5938,55.7812,55.9688,56.1562,56.3438,56.5312,56.7188,56.9062,57.0938,57.2812,57.4688,57.6562,57.8438,58.0312,58.2188,58.4062,58.5938,58.7812,58.9688,59.1562,59.3438,59.5312,59.7188,120.0};
double PulseShapeAy[]={
  0.0,0.0,0.000340905,0.00416903,0.0188591,0.0540343,0.120216,0.211643,0.319325,0.438917,0.565307,0.678123,0.774648,0.853604,0.917034,0.961746,0.988478,1.00175,1.00328,0.996401,0.982376,0.960598,0.933633,0.906427,0.876712,0.842186,0.80444,0.767743,0.729802,0.693321,0.652123,0.610939,0.570848,0.531327,0.493778,0.455752,0.41823,0.379785,0.343437,0.308885,0.276318,0.244931,0.21127,0.181186,0.152319,0.124507,0.0970509,0.0713865,0.0465666,0.0232995,0.00169822,-0.0190118,-0.0383741,-0.0575415,-0.07647,-0.0928749,-0.108921,-0.122877,-0.137493,-0.150936,-0.162448,-0.173478,-0.183942,-0.194041,-0.202699,-0.210915,-0.218462,-0.225555,-0.231788,-0.23681,-0.242883,-0.246953,-0.251139,-0.253966,-0.257424,-0.260764,-0.262843,-0.265014,-0.266073,-0.267625,-0.268352,-0.269586,-0.26966,-0.269682,-0.269118,-0.268598,-0.268516,-0.267674,-0.266596,-0.265142,-0.263401,-0.262182,-0.260167,-0.259138,-0.256472,-0.254264,-0.25223,-0.250577,-0.248215,-0.244661,-0.242364,-0.239785,-0.237653,-0.234758,-0.232217,-0.228892,-0.22565,-0.22331,-0.220976,-0.217693,-0.21426,-0.211006,-0.208441,-0.205559,-0.202891,-0.199441,-0.196758,-0.19343,-0.191008,-0.188348,-0.185209,-0.181814,-0.178858,-0.176257,-0.174057,-0.170931,-0.167695,-0.164981,-0.162478,-0.159944,-0.157208,-0.153947,-0.15163,-0.148922,-0.146591,-0.144276,-0.141221,-0.138867,-0.136506,-0.134048,-0.132015,-0.129569,-0.126415,-0.124332,-0.122195,-0.120258,-0.117937,-0.115615,-0.113143,-0.111283,-0.10933,-0.107563,-0.10484,-0.103088,-0.100973,-0.0991377,-0.0974394,-0.0954976,-0.0930423,-0.0912969,-0.0896049,-0.0883058,-0.0865524,-0.084371,-0.0826134,-0.0811334,-0.0799129,-0.0780751,-0.0761576,-0.0743783,-0.0733021,-0.0719741,-0.0707207,-0.0689514,-0.06692,-0.0657139,-0.0647728,-0.0636742,-0.062223,-0.0604053,-0.0591177,-0.058262,-0.0575238,-0.0560429,-0.0548002,-0.0534665,-0.0523395,-0.0513658,-0.050675,-0.0494789,-0.0476675,-0.0471164,-0.0462185,-0.0454703,-0.0445383,-0.042872,-0.0422344,-0.0414422,-0.0409904,-0.0399998,-0.0388039,-0.0380844,-0.0373905,-0.0365654,-0.0359743,-0.0351698,-0.0340795,-0.0333043,-0.0330561,-0.0322158,-0.0316515,-0.030709,-0.0298681,-0.0291885,-0.0290977,-0.0284244,-0.0275358,-0.0267061,-0.0261757,-0.0259042,-0.0255018,-0.0247829,-0.0239126,-0.0234716,-0.0230201,-0.0226471,-0.0222074,-0.0212443,-0.0206868,-0.0207469,-0.0205114,-0.0201613,-0.0195055,-0.0189771,-0.0183809,-0.0180907,-0.0180057,-0.0175903,-0.0168272,-0.0163545,-0.0164818,-0.0160499,-0.0156923,-0.01485,-0.0146478,-0.0143508,-0.0143088,-0.0139645,-0.0135595,-0.0129927,-0.0128587,-0.0127315,-0.0128118,-0.0120652,-0.0116984,-0.0113028,-0.0115245,-0.011311,-0.0108975,-0.0103816,-0.0101538,-0.0102596,-0.0101391,-0.00974901,-0.00922877,-0.00902822,-0.00887931,-0.0087756,-0.00891741,-0.00832845,-0.00792569,-0.00767892,-0.00766573,-0.00755212,-0.00756785,-0.00702448,-0.00687294,-0.00680349,-0.00683589,-0.00697256,-0.00630557,-0.00596187,-0.00621483,-0.00604657,-0.00593991,-0.00580416,-0.00521133,-0.00528717,-0.00521502,-0.00532682,-0.00508467,-0.00472202,-0.00440608,-0.0045109,-0.00452309,-0.00455987,-0.00423618,-0.00399851,-0.00359223,-0.004082,-0.00407724,-0.00361534,-0.00330791,-0.00324841,-0.00339795,-0.00338157,-0.0033128,-0.00316157,-0.00294039,-0.00274167,-0.00280329,-0.00298259,-0.0028353,-0.00269819,-0.00237636,-0.00258278,-0.00274308,-0.00253581,-0.00207717,-0.00200835,-0.00232801,-0.00252991,-0.00250679,-0.00181778,-0.00177016,-0.00176989,-0.00201327,-0.00191049,-0.00198259,0.0};

double PulseShapeBx[]={
  -120, -3, -2.875, -2.625, -2.375, -2.125, -1.875, -1.625, -1.375, -1.125, -0.875, -0.625, -0.375, -0.125, 0.125, 0.375, 0.625, 0.875, 1.125, 1.375, 1.625, 1.875, 2.125, 2.375, 2.625, 2.875, 3.125, 3.375, 3.625, 3.875, 4.125, 4.375, 4.625, 4.875, 5.125, 5.375, 5.625, 5.875, 6.125, 6.375, 6.625, 6.875, 7.375, 7.875, 8.375, 8.875, 9.375, 9.875, 10.375, 10.875, 11.375, 11.875, 12.375, 12.875, 13.375, 13.875, 14.375, 14.875, 15.375, 15.875, 16.375, 16.875, 17.375, 17.875, 18.375, 18.875, 19.375, 19.875, 20.875, 21.875, 22.875, 23.875, 24.875, 25.875, 26.875, 27.875, 28.875, 29.875, 30.875, 31.875, 32.875, 33.875, 34.875, 35.875, 36.875, 37.875, 38.875, 39.875, 40.875, 41.875, 42.875, 43.875, 44.875, 45.875, 46.875, 47.875, 48.875, 49.875, 50, 120};
double PulseShapeBy[]={
  0, 0, 0.000432793, 0.000260929, 0.000614723, 0.000953838, 0.00286787, 0.0127054, 0.0374962, 0.0824728, 0.150069, 0.236547, 0.339973, 0.452243, 0.568504, 0.677963, 0.776589, 0.859961, 0.926294, 0.971206, 0.995508, 0.99908, 0.984289, 0.952546, 0.905162, 0.847092, 0.779593, 0.705306, 0.625594, 0.546425, 0.464685, 0.38457, 0.307183, 0.235125, 0.165501, 0.100996, 0.0419627, -0.0111781, -0.0609958, -0.106179, -0.146501, -0.183122, -0.244329, -0.289143, -0.32192, -0.342992, -0.356058, -0.360972, -0.360358, -0.354465, -0.346864, -0.334485, -0.320523, -0.306017, -0.289173, -0.273149, -0.255425, -0.240342, -0.223238, -0.207915, -0.192245, -0.178362, -0.163773, -0.151874, -0.139201, -0.128143, -0.117808, -0.108262, -0.0912705, -0.0763818, -0.0635442, -0.0527532, -0.0438892, -0.0367667, -0.0304761, -0.025461, -0.0213576, -0.0180036, -0.0150747, -0.012237, -0.0102845, -0.0089381, -0.0069477, -0.006091, -0.0051958, -0.00431964, -0.00300008, -0.00228289, -0.00197987, -0.00196721, -0.00162016, -0.001245, -0.00109294, -0.000717657, -0.00055068, -0.000441984, -0.000437774, -0.000127175, 0, 0};

double PulseShapeCx[]={
  -120, -3, -2.875, -2.625, -2.375, -2.125, -1.875, -1.625, -1.375, -1.125, -0.875, -0.625, -0.375, -0.125, 0.125, 0.375, 0.625, 0.875, 1.125, 1.375, 1.625, 1.875, 2.125, 2.375, 2.625, 2.875, 3.125, 3.375, 3.625, 3.875, 4.125, 4.375, 4.625, 4.875, 5.125, 5.375, 5.625, 5.875, 6.125, 6.375, 6.625, 6.875, 7.375, 7.875, 8.375, 8.875, 9.375, 9.875, 10.375, 10.875, 11.375, 11.875, 12.375, 12.875, 13.375, 13.875, 14.375, 14.875, 15.375, 15.875, 16.375, 16.875, 17.375, 17.875, 18.375, 18.875, 19.375, 19.875, 20.875, 21.875, 22.875, 23.875, 24.875, 25.875, 26.875, 27.875, 28.875, 29.875, 30.875, 31.875, 32.875, 33.875, 34.875, 35.875, 36.875, 37.875, 38.875, 39.875, 40.875, 41.875, 42.875, 43.875, 44.875, 45.875, 46.875, 47.875, 48.875, 49.875, 50, 120};
double PulseShapeCy[]={ 0, 0, 0.00054593, 6.76358e-05, -0.000411278, -0.000212871, -4.10776e-05, -9.3914e-05, 0.00147636, 0.0144717, 0.0626707, 0.144213, 0.276542, 0.42991, 0.603559, 0.752087, 0.875965, 0.954946, 0.995888, 0.999939, 0.97187, 0.913238, 0.828134, 0.739656, 0.64611, 0.553148, 0.451203, 0.364893, 0.282674, 0.206572, 0.131346, 0.0726521, 0.0129013, -0.0388009, -0.0843668, -0.120783, -0.157304, -0.192086, -0.218017, -0.240353, -0.258838, -0.27652, -0.296318, -0.309154, -0.310699, -0.30749, -0.303894, -0.289758, -0.277018, -0.259754, -0.246595, -0.227677, -0.214604, -0.195942, -0.182256, -0.166138, -0.153834, -0.139966, -0.129896, -0.116825, -0.107686, -0.0971019, -0.0894217, -0.080022, -0.0731432, -0.0653453, -0.0604067, -0.0533267, -0.0443434, -0.03647, -0.0299625, -0.0246672, -0.0203706, -0.0169636, -0.0139526, -0.0119901, -0.00966007, -0.00767411, -0.00679297, -0.00510271, -0.00483451, -0.00429725, -0.00295455, -0.00279079, -0.00264096, -0.0027994, -0.00143557, -0.00159796, -0.00119869, -0.00114988, -0.0010963, -0.00147381, -0.000378283, -0.000604984, -0.000779785, -0.000571299, -0.000390008, 0.000198695, 0, 0};

double PulseShapeDx[]={
  -120, -3, -2.875, -2.625, -2.375, -2.125, -1.875, -1.625, -1.375, -1.125, -0.875, -0.625, -0.375, -0.125, 0.125, 0.375, 0.625, 0.875, 1.125, 1.375, 1.625, 1.875, 2.125, 2.375, 2.625, 2.875, 3.125, 3.375, 3.625, 3.875, 4.125, 4.375, 4.625, 4.875, 5.125, 5.375, 5.625, 5.875, 6.125, 6.375, 6.625, 6.875, 7.375, 7.875, 8.375, 8.875, 9.375, 9.875, 10.375, 10.875, 11.375, 11.875, 12.375, 12.875, 13.375, 13.875, 14.375, 14.875, 15.375, 15.875, 16.375, 16.875, 17.375, 17.875, 18.375, 18.875, 19.375, 19.875, 20.875, 21.875, 22.875, 23.875, 24.875, 25.875, 26.875, 27.875, 28.875, 29.875, 30.875, 31.875, 32.875, 33.875, 34.875, 35.875, 36.875, 37.875, 38.875, 39.875, 40.875, 41.875, 42.875, 43.875, 44.875, 45.875, 46.875, 47.875, 48.875, 49.875, 50, 120};
double PulseShapeDy[]={
  0, 0, -0.000401405, -0.00111026, -0.000436824, -2.00669e-05, -0.000543498, 0.000234474, 0.00217043, 0.0181858, 0.0687782, 0.161924, 0.289223, 0.432132, 0.584884, 0.716937, 0.823926, 0.905798, 0.965418, 0.995047, 1.00849, 1.00679, 0.997122, 0.974203, 0.946524, 0.91084, 0.871577, 0.830126, 0.783594, 0.737709, 0.686455, 0.63998, 0.58841, 0.542523, 0.489354, 0.444841, 0.395521, 0.352748, 0.306658, 0.266749, 0.222922, 0.186055, 0.11428, 0.047682, -0.00961651, -0.0599645, -0.104892, -0.144098, -0.180449, -0.206568, -0.229954, -0.247557, -0.264321, -0.271816, -0.282284, -0.285499, -0.290135, -0.290567, -0.2887, -0.284881, -0.283622, -0.274379, -0.27146, -0.263884, -0.258305, -0.249454, -0.242192, -0.232002, -0.216327, -0.200174, -0.184223, -0.168853, -0.155022, -0.140081, -0.127538, -0.116029, -0.104287, -0.0951492, -0.0851266, -0.0758832, -0.0684301, -0.0623942, -0.0548814, -0.0499772, -0.0444097, -0.0397809, -0.0357408, -0.031698, -0.0282949, -0.025348, -0.0229192, -0.020086, -0.0182068, -0.0157167, -0.0141323, -0.0122376, -0.0112713, -0.0102357, 0, 0};

double LaserPulseShapeAx[]={
  -100.0, -4.925, -4.775, -4.625, -4.475, -4.325, -4.175, -4.025, -3.875, -3.725, -3.575, -3.425, -3.275, -3.125, -2.975, -2.825, -2.675, -2.525, -2.375, -2.225, -2.075, -1.925, -1.775, -1.625, -1.475, -1.325, -1.175, -1.025, -0.875, -0.725, -0.575, -0.425, -0.275, -0.125, 0.025, 0.175, 0.325, 0.475, 0.625, 0.775, 0.925, 1.075, 1.225, 1.375, 1.525, 1.675, 1.825, 1.975, 2.125, 2.275, 2.425, 2.575, 2.725, 2.875, 3.025, 3.175, 3.325, 3.475, 3.625, 3.775, 3.925, 4.075, 4.225, 4.375, 4.525, 4.675, 4.825, 4.975, 5.125, 5.275, 5.425, 5.575, 5.725, 5.875, 6.025, 6.175, 6.325, 6.475, 6.625, 6.775, 6.925, 7.075, 7.225, 7.375, 7.525, 7.675, 7.825, 7.975, 8.125, 8.275, 8.425, 8.575, 8.725, 8.875, 9.025, 9.175, 9.325, 9.475, 9.625, 9.775, 9.925, 10.075, 10.225, 10.375, 10.525, 10.675, 10.825, 10.975, 11.125, 11.275, 11.425, 11.575, 11.725, 11.875, 12.025, 12.175, 12.325, 12.475, 12.625, 12.775, 12.925, 13.075, 13.225, 13.375, 13.525, 13.675, 13.825, 13.975, 14.125, 14.275, 14.425, 14.575, 14.725, 14.875, 15.025, 15.175, 15.325, 15.475, 15.625, 15.775, 15.925, 16.075, 16.225, 16.375, 16.525, 16.675, 16.825, 16.975, 17.125, 17.275, 17.425, 17.575, 17.725, 17.875, 18.025, 18.175, 18.325, 18.475, 18.625, 18.775, 18.925, 19.075, 19.225, 19.375, 19.525, 19.675, 19.825, 19.975, 20.125, 20.275, 20.425, 20.575, 20.725, 20.875, 21.025, 21.175, 21.325, 21.475, 21.625, 21.775, 21.925, 22.075, 22.225, 22.375, 22.525, 22.675, 22.825, 22.975, 23.125, 23.275, 23.425, 23.575, 23.725, 23.875, 24.025, 24.175, 24.325, 24.475, 24.625, 24.775, 24.925, 25.075, 25.225, 25.375, 25.525, 25.675, 25.825, 25.975, 26.125, 26.275, 26.425, 26.575, 26.725, 26.875, 27.025, 27.175, 27.325, 27.475, 27.625, 27.775, 27.925, 28.075, 28.225, 28.375, 28.525, 28.675, 28.825, 28.975, 29.125, 29.275, 29.425, 29.575, 29.725, 29.875, 30.025, 30.175, 30.325, 30.475, 30.625, 30.775, 30.925, 31.075, 31.225, 31.375, 31.525, 31.675, 31.825, 31.975, 32.125, 32.275, 32.425, 32.575, 32.725, 32.875, 33.025, 33.175, 33.325, 33.475, 33.625, 33.775, 33.925, 34.075, 34.225, 34.375, 34.525, 34.675, 34.825, 34.975, 35.125, 35.275, 35.425, 35.575, 35.725, 35.875, 36.025, 36.175, 36.325, 36.475, 36.625, 36.775, 36.925, 37.075, 37.225, 37.375, 37.525, 37.675, 37.825, 37.975, 38.125, 38.275, 38.425, 38.575, 38.725, 38.875, 39.025, 39.175, 39.325, 39.475, 39.625, 39.775, 39.925, 40.075, 40.225, 40.375, 40.525, 40.675, 40.825, 40.975, 41.125, 41.275, 41.425, 41.575, 41.725, 41.875, 42.025, 42.175, 42.325, 42.475, 42.625, 42.775, 42.925, 43.075, 43.225, 43.375, 43.525, 43.675, 43.825, 43.975, 44.125, 44.275, 44.425, 44.575, 44.725, 44.875, 45.025, 45.175, 45.325, 45.475, 45.625, 45.775, 45.925, 46.075, 46.225, 46.375, 46.525, 46.675, 46.825, 46.975, 47.125, 47.275, 47.425, 47.575, 47.725, 47.875, 48.025, 48.175, 48.325, 48.475, 48.625, 48.775, 48.925, 49.075, 49.225, 49.375, 49.525, 49.675, 49.825, 49.975, 120.0};
double LaserPulseShapeAy[]={
  0.0, 0.0, -0.00045323, -0.00071508, -0.000157695, 0.000665824, -0.00062837, 0.00119113, -0.000604146, -0.00129474, -0.000858801, 0.000631254, -0.000514295, 0.000253362, 0.000867133, -0.000891295, -0.00139706, -0.00162488, 0.000237366, -0.00118421, 0.000666927, -9.96243e-05, -0.000838693, -0.000602733, -0.000391203, -0.00010348, -0.000389885, 0.00341618, 0.00861987, 0.0310742, 0.0689635, 0.147391, 0.237529, 0.372491, 0.523625, 0.678863, 0.818876, 0.9268, 0.986596, 0.999466, 0.999829, 0.96829, 0.911651, 0.849831, 0.78589, 0.710603, 0.664882, 0.604054, 0.538284, 0.476282, 0.415147, 0.37772, 0.333046, 0.303648, 0.270054, 0.233033, 0.197318, 0.159256, 0.141034, 0.116159, 0.0963578, 0.0745513, 0.0530455, 0.0286612, 0.0118205, -0.00337108, -0.014932, -0.0283199, -0.0423038, -0.0557716, -0.0702153, -0.077478, -0.0873046, -0.0946601, -0.100462, -0.106978, -0.114076, -0.123607, -0.12406, -0.129518, -0.134333, -0.137892, -0.141327, -0.145069, -0.149734, -0.151509, -0.152631, -0.154907, -0.155983, -0.1567, -0.158147, -0.156738, -0.154988, -0.154558, -0.153722, -0.151959, -0.151839, -0.152549, -0.151055, -0.150123, -0.151474, -0.150474, -0.149168, -0.148121, -0.148265, -0.146127, -0.146487, -0.146716, -0.145433, -0.144017, -0.142491, -0.142914, -0.139679, -0.139659, -0.139586, -0.13723, -0.135362, -0.132568, -0.132588, -0.130901, -0.130236, -0.129444, -0.1278, -0.126087, -0.124792, -0.121775, -0.121834, -0.120507, -0.118905, -0.116016, -0.113179, -0.113018, -0.108629, -0.108488, -0.107621, -0.106481, -0.104782, -0.100475, -0.101174, -0.0988918, -0.0972262, -0.0969156, -0.0950503, -0.0936162, -0.0916045, -0.0886289, -0.0890954, -0.0868825, -0.0868678, -0.0854627, -0.0830608, -0.0826387, -0.0805879, -0.0795723, -0.0786006, -0.0790753, -0.0778135, -0.0745703, -0.0742861, -0.0740387, -0.0714044, -0.0711067, -0.0706894, -0.0692284, -0.0673393, -0.0654976, -0.066133, -0.0630667, -0.064024, -0.0631648, -0.0619612, -0.0598005, -0.0594759, -0.0586573, -0.0569488, -0.0578612, -0.0566349, -0.0555929, -0.0529455, -0.0539796, -0.0514687, -0.0514687, -0.0518406, -0.0509212, -0.0493807, -0.0480973, -0.0485161, -0.0449378, -0.0462238, -0.0462691, -0.0460529, -0.0422376, -0.0440988, -0.0426132, -0.0409781, -0.0414561, -0.0413169, -0.0420893, -0.0378173, -0.0389444, -0.0375033, -0.0367162, -0.0370218, -0.0364832, -0.0361232, -0.0349944, -0.0347875, -0.0319818, -0.0330797, -0.0333719, -0.033752, -0.0298798, -0.0327202, -0.0308183, -0.0293738, -0.0292327, -0.0290442, -0.0316581, -0.026568, -0.0281839, -0.0274893, -0.0268061, -0.0261648, -0.0254022, -0.0260972, -0.0263772, -0.0248487, -0.0234583, -0.0232818, -0.0230768, -0.023828, -0.0211721, -0.0233278, -0.0224963, -0.0214844, -0.0203003, -0.0198585, -0.0225017, -0.018852, -0.0194619, -0.0196335, -0.0192852, -0.0183719, -0.0181481, -0.0189852, -0.0187126, -0.0170467, -0.0177487, -0.0168537, -0.0163108, -0.0170636, -0.0165472, -0.0170838, -0.0174415, -0.0169104, -0.0149877, -0.0138645, -0.0142606, -0.0132525, -0.0117383, -0.0125239, -0.0119267, -0.0110119, -0.0106818, -0.0117638, -0.0112908, -0.011248, -0.0122808, -0.011874, -0.0112787, -0.0112915, -0.0117838, -0.0103558, -0.0107604, -0.0117009, -0.010688, -0.0100176, -0.00928808, -0.0107842, -0.0100416, -0.0106856, -0.0107286, -0.00992778, -0.00981823, -0.00974766, -0.00846976, -0.00844103, -0.00860451, -0.00827202, -0.00743153, -0.00646694, -0.00804296, -0.00587277, -0.00614068, -0.00719133, -0.00745603, -0.00721983, -0.00488473, -0.00717414, -0.00576815, -0.00578334, -0.00608558, -0.00594654, -0.00611758, -0.00518149, -0.00477738, -0.00529691, -0.00514956, -0.00617287, -0.00630551, -0.00552256, -0.0063642, -0.00453582, -0.0047617, -0.00530971, -0.00608962, -0.0061097, -0.00385997, -0.00540489, -0.00526855, -0.004213, -0.00463674, -0.00533428, -0.00493469, -0.00393826, -0.00328617, -0.00400299, -0.00247789, -0.00398386, -0.00459576, -0.0041298, -0.00378085, -0.00406086, -0.00392153, -0.00291307, -0.00465619, -0.00493033, -0.00454138, -0.00366725, -0.00444642, -0.00234919, -0.00322169, -0.00425623, -0.00389047, -0.00313305, -0.00276898, -0.00372419, -0.00100731, -0.00268745, -0.00351367, -0.00373253, -0.00134436, -0.00357253, -0.00226535, -0.00119842, -0.00244631, -0.00283429, -0.00427724, -0.000881996, -0.00276745, -0.00128302, -0.0018581, -0.00286163, -0.00271632, -0.00246209, -0.00272946, -0.00235509, 0.0, 0.0};

double LaserPulseShapeBx[]={
  -120, -3, -2.875, -2.625, -2.375, -2.125, -1.875, -1.625, -1.375, -1.125, -0.875, -0.625, -0.375, -0.125, 0.125, 0.375, 0.625, 0.875, 1.125, 1.375, 1.625, 1.875, 2.125, 2.375, 2.625, 2.875, 3.125, 3.375, 3.625, 3.875, 4.125, 4.375, 4.625, 4.875, 5.125, 5.375, 5.625, 5.875, 6.125, 6.375, 6.625, 6.875, 7.375, 7.875, 8.375, 8.875, 9.375, 9.875, 10.375, 10.875, 11.375, 11.875, 12.375, 12.875, 13.375, 13.875, 14.375, 14.875, 15.375, 15.875, 16.375, 16.875, 17.375, 17.875, 18.375, 18.875, 19.375, 19.875, 20.875, 21.875, 22.875, 23.875, 24.875, 25.875, 26.875, 27.875, 28.875, 29.875, 30.875, 31.875, 32.875, 33.875, 34.875, 35.875, 36.875, 37.875, 38.875, 39.875, 40.875, 41.875, 42.875, 43.875, 44.875, 45.875, 46.875, 47.875, 48.875, 49.875, 50, 120};
double LaserPulseShapeBy[]={
  0, 0, 0.000974635, 0.000755366, 0.000444366, 0.000726062, 0.00088607, 0.000626137, 0.00110697, 0.0101376, 0.0492948, 0.138389, 0.269679, 0.419369, 0.586028, 0.740034, 0.862907, 0.946569, 0.992107, 0.999754, 0.97534, 0.918911, 0.829544, 0.723613, 0.614391, 0.500638, 0.377278, 0.257931, 0.152021, 0.0581949, -0.0298754, -0.108973, -0.173366, -0.224062, -0.265942, -0.300089, -0.325126, -0.340622, -0.34987, -0.355855, -0.358455, -0.35558, -0.341985, -0.325284, -0.302676, -0.282084, -0.258835, -0.239015, -0.217744, -0.199981, -0.180839, -0.165271, -0.148745, -0.135229, -0.121074, -0.109252, -0.0976242, -0.0877681, -0.0784689, -0.0703679, -0.0625296, -0.0555377, -0.0485351, -0.042762, -0.0374725, -0.0333749, -0.0300393, -0.0271042, -0.0230046, -0.0195281, -0.0165004, -0.0139958, -0.011447, -0.00930722, -0.00764842, -0.00621046, -0.00499622, -0.00407325, -0.00318048, -0.00266657, -0.00217314, -0.00146818, -0.00136839, -0.000864238, -0.00047235, -0.000417262, -0.000213447, -5.56798e-05, 0.000112094, 0.000211381, 0.000466504, 0.000343203, 0.000275879, 0.000370393, 0.000584315, 0.000680067, 0.00072324, 0.000712105, 0, 0};

const int NPointsPulseShapeA=sizeof(PulseShapeAx)/sizeof(double);
const int NPointsPulseShapeB=sizeof(PulseShapeBx)/sizeof(double);
const int NPointsPulseShapeC=sizeof(PulseShapeCx)/sizeof(double);
const int NPointsPulseShapeD=sizeof(PulseShapeDx)/sizeof(double);
const int NPointsLaserShapeA=sizeof(LaserPulseShapeAx)/sizeof(double);
const int NPointsLaserShapeB=sizeof(LaserPulseShapeBx)/sizeof(double);


//ROOT::Math::Interpolator pulseItp(NPointsPulseShape);  // cspline

double funcPulseA(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsPulseShapeA, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsPulseShapeA,PulseShapeAx,PulseShapeAy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}
	
double funcPulseB(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsPulseShapeB, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsPulseShapeB,PulseShapeBx,PulseShapeBy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}

double funcPulseC(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsPulseShapeC, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsPulseShapeC,PulseShapeCx,PulseShapeCy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}

double funcPulseD(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsPulseShapeD, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsPulseShapeD,PulseShapeDx,PulseShapeDy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}

double funcPulseLaserA(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsLaserShapeA, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsLaserShapeA,LaserPulseShapeAx,LaserPulseShapeAy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}

double funcPulseLaserB(double *x, double *par){
  static bool first=true;
  static ROOT::Math::Interpolator *pulseItp;
  if (first) {
    pulseItp=new ROOT::Math::Interpolator(NPointsLaserShapeB, 
					  ROOT::Math::Interpolation::kLINEAR);
    pulseItp->SetData(NPointsLaserShapeB,LaserPulseShapeBx,LaserPulseShapeBy);
    first=false;
  }
  return par[0] + par[1] * pulseItp->Eval( x[0] - par[2] );
}
		
std::ostream& operator<<(std::ostream& s, const PulseFit& f){
  return s<<"FIT RESULT==> pedestal: "<< f.pedestal << " noise: " <<  f.noise 
	  << " AMax: " << f.aMaxValue << " TRise: " << f.tRiseValue << "\n"
	  << " Chi2: " << f.chi2 << " ndof: " << f.ndof 
	  << " Chi2Peak: " <<  f.chi2Peak << " ndofPeak: " << f.ndofPeak
	  << " status: " << f.status;
}

